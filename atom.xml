<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>That Damn Cabbage</title>
  <link href="http://robhoward.id.au/atom.xml" rel="self"/>
  <link href="http://robhoward.id.au/"/>
  <updated>2012-01-18T02:54:22+11:00</updated>
  <id>http://robhoward.id.au/</id>
  <author>
    <name>Rob Howard</name>
    
      <email>rob@robhoward.id.au</email>
    
  </author>

  
  <entry>
    <title>Pilfering Gems: Testing With Timecop</title>
    <link href="http://robhoward.id.au/blog/2012/01/pilfering-gems-testing-with-timecop/"/>
    <updated>2012-01-05T11:32:00+11:00</updated>
    <id>http://robhoward.id.au/blog/2012/01/pilfering-gems-testing-with-timecop</id>
    <content type="html">&lt;p&gt;&lt;em&gt;This is the first in a short series of posts showing you how to cherry-pick some of the niftier things (libraries, techniques, whatever) from the Ruby world for use in your PHP work.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jtrupiano/timecop&quot;&gt;Timecop&lt;/a&gt; is a library that makes testing time-dependant code a cinch.&lt;/p&gt;

&lt;p&gt;The results from a graphing calculator isn't going to change if you run it now or next week. Something like a prize-draw competition, though, will produce wildly different results depending when a punter puts in an entry, and testing this is where you wedge Timecop.&lt;/p&gt;

&lt;p&gt;Take the example of that prize-draw competition. It's initially closed, no entries allowed; it opens for a while, during which you can enter, and then finally, it closes again and a winner is drawn.&lt;/p&gt;

&lt;p&gt;Let's run through how we tackle testing this with Timecop.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2&gt;Timecop (Ruby)&lt;/h2&gt;

&lt;p&gt;Let's assume we have two classes: &lt;code&gt;Competition&lt;/code&gt; and &lt;code&gt;Entry&lt;/code&gt;. You set up a competition by giving it the open and close dates; calling &lt;code&gt;enter&lt;/code&gt; on the competition with your details will give you back an &lt;code&gt;Entry&lt;/code&gt; object to interrogate:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;lang=ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;competition = Competition.new(:open =&gt; &quot;2012-01-01 09:00&quot;, :close =&gt; &quot;2015-12-30 23:59&quot;)
&lt;/div&gt;&lt;div class='line'&gt;entry       = competition.enter(:name =&gt; &quot;Sam&quot;)
&lt;/div&gt;&lt;div class='line'&gt;entry.valid? # =&gt; true&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;Pretty simple. To start with, let's just get a taste of how to test something like this with Timecop; we'll go through the nitty-gritty of setting it up a little further on.&lt;/p&gt;

&lt;p&gt;Here's a bare-bones &lt;a href=&quot;http://rspec.info&quot;&gt;RSpec&lt;/a&gt; test, with the easiest test case filled out:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;lang=ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;span class='line'&gt;14&lt;/span&gt;
&lt;span class='line'&gt;15&lt;/span&gt;
&lt;span class='line'&gt;16&lt;/span&gt;
&lt;span class='line'&gt;17&lt;/span&gt;
&lt;span class='line'&gt;18&lt;/span&gt;
&lt;span class='line'&gt;19&lt;/span&gt;
&lt;span class='line'&gt;20&lt;/span&gt;
&lt;span class='line'&gt;21&lt;/span&gt;
&lt;span class='line'&gt;22&lt;/span&gt;
&lt;span class='line'&gt;23&lt;/span&gt;
&lt;span class='line'&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;require 'spec_helper'
&lt;/div&gt;&lt;div class='line'&gt;require 'timecop'
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;describe Competition do
&lt;/div&gt;&lt;div class='line'&gt;  let!(:competition) do
&lt;/div&gt;&lt;div class='line'&gt;    # Opens a day from now, closes a day after that.
&lt;/div&gt;&lt;div class='line'&gt;    day = 86400
&lt;/div&gt;&lt;div class='line'&gt;    Competition.new(:open =&gt; Time.now + day, :close =&gt; Time.now + day*2)
&lt;/div&gt;&lt;div class='line'&gt;  end
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;  it &quot;should reject early entries&quot; do
&lt;/div&gt;&lt;div class='line'&gt;    entry = competition.enter(:name =&gt; &quot;Bert&quot;)
&lt;/div&gt;&lt;div class='line'&gt;    entry.valid?.should == false
&lt;/div&gt;&lt;div class='line'&gt;    entry.errors.should include(&quot;Too early!&quot;)
&lt;/div&gt;&lt;div class='line'&gt;  end
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;  it &quot;should accept timely entries&quot; do
&lt;/div&gt;&lt;div class='line'&gt;    # TODO
&lt;/div&gt;&lt;div class='line'&gt;  end
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;  it &quot;should reject late entries&quot; do
&lt;/div&gt;&lt;div class='line'&gt;    # TODO
&lt;/div&gt;&lt;div class='line'&gt;  end
&lt;/div&gt;&lt;div class='line'&gt;end&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;The open date is always a day from now, so the &quot;early entry&quot; condition is easy. The other two are a bit tougher.&lt;/p&gt;

&lt;p&gt;Timecop provides a couple of ways of altering time: &lt;code&gt;Timecop.travel&lt;/code&gt; (jump to a particular time), or &lt;code&gt;Timecop.freeze&lt;/code&gt; (jump to a particular time &lt;em&gt;and&lt;/em&gt; freeze the clock). In both cases, a &lt;code&gt;Timecop.return&lt;/code&gt; will revert back to reality.&lt;/p&gt;

&lt;p&gt;In addition to this, you can pass &lt;code&gt;freeze&lt;/code&gt; a block (a closure, eg. &lt;code&gt;do ... end&lt;/code&gt;), and have it automatically return for you after the block has been called.&lt;/p&gt;

&lt;p&gt;Let's fill out those test cases:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;lang=ruby &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;span class='line'&gt;14&lt;/span&gt;
&lt;span class='line'&gt;15&lt;/span&gt;
&lt;span class='line'&gt;16&lt;/span&gt;
&lt;span class='line'&gt;17&lt;/span&gt;
&lt;span class='line'&gt;18&lt;/span&gt;
&lt;span class='line'&gt;19&lt;/span&gt;
&lt;span class='line'&gt;20&lt;/span&gt;
&lt;span class='line'&gt;21&lt;/span&gt;
&lt;span class='line'&gt;22&lt;/span&gt;
&lt;span class='line'&gt;23&lt;/span&gt;
&lt;span class='line'&gt;24&lt;/span&gt;
&lt;span class='line'&gt;25&lt;/span&gt;
&lt;span class='line'&gt;26&lt;/span&gt;
&lt;span class='line'&gt;27&lt;/span&gt;
&lt;span class='line'&gt;28&lt;/span&gt;
&lt;span class='line'&gt;29&lt;/span&gt;
&lt;span class='line'&gt;30&lt;/span&gt;
&lt;span class='line'&gt;31&lt;/span&gt;
&lt;span class='line'&gt;32&lt;/span&gt;
&lt;span class='line'&gt;33&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;require 'spec_helper'
&lt;/div&gt;&lt;div class='line'&gt;require 'timecop'
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;describe Competition do
&lt;/div&gt;&lt;div class='line'&gt;  let (:day) { 86400 }
&lt;/div&gt;&lt;div class='line'&gt;  let!(:competition) do
&lt;/div&gt;&lt;div class='line'&gt;    # Opens a day from now, closes a day after that.
&lt;/div&gt;&lt;div class='line'&gt;    Competition.new(:open =&gt; Time.now + day, :close =&gt; Time.now + day*2)
&lt;/div&gt;&lt;div class='line'&gt;  end
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;  it &quot;should reject early entries&quot; do
&lt;/div&gt;&lt;div class='line'&gt;    entry = competition.enter(:name =&gt; &quot;Bert&quot;)
&lt;/div&gt;&lt;div class='line'&gt;    entry.valid?.should == false
&lt;/div&gt;&lt;div class='line'&gt;    entry.errors.should include(&quot;Too early!&quot;)
&lt;/div&gt;&lt;div class='line'&gt;  end
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;  it &quot;should accept timely entries&quot; do
&lt;/div&gt;&lt;div class='line'&gt;    # A day and a half from now.
&lt;/div&gt;&lt;div class='line'&gt;    Timecop.freeze(Time.now + day*1.5) do
&lt;/div&gt;&lt;div class='line'&gt;      entry = competition.enter(:name =&gt; &quot;Sam&quot;)
&lt;/div&gt;&lt;div class='line'&gt;      entry.valid?.should == true
&lt;/div&gt;&lt;div class='line'&gt;    end
&lt;/div&gt;&lt;div class='line'&gt;  end
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;  it &quot;should reject late entries&quot; do
&lt;/div&gt;&lt;div class='line'&gt;    # Three days from now, after competition closure.
&lt;/div&gt;&lt;div class='line'&gt;    Timecop.freeze(Time.now + day*3) do
&lt;/div&gt;&lt;div class='line'&gt;      entry = competition.enter(:name =&gt; &quot;Frank&quot;)
&lt;/div&gt;&lt;div class='line'&gt;      entry.valid?.should == false
&lt;/div&gt;&lt;div class='line'&gt;      entry.errors.should include(&quot;Too late!&quot;)
&lt;/div&gt;&lt;div class='line'&gt;    end
&lt;/div&gt;&lt;div class='line'&gt;  end
&lt;/div&gt;&lt;div class='line'&gt;end&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;You can get the sample classes, full test suite and running instructions from &lt;a href=&quot;https://github.com/damncabbage/pilfering-gems-examples/blob/master/timecop/ruby&quot;&gt;the ruby directory in this GitHub project&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Timecop-PHP&lt;/h2&gt;

&lt;p&gt;Timecop was &lt;a href=&quot;https://github.com/erikfercak/Timecop-PHP&quot;&gt;ported to PHP by Erik Ferčák&lt;/a&gt;. It depends on PHP5.3+ and the &lt;a href=&quot;Runkit%20Extension&quot;&gt;https://github.com/zenovich/runkit.git&lt;/a&gt; (in order to mess around with core functions, such as &lt;code&gt;time()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Again, let's just run through an example before diving into setting it up.&lt;/p&gt;

&lt;p&gt;Starting with a basic PHPUnit test case, again with the easiest test case filled out:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;lang=php &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;span class='line'&gt;14&lt;/span&gt;
&lt;span class='line'&gt;15&lt;/span&gt;
&lt;span class='line'&gt;16&lt;/span&gt;
&lt;span class='line'&gt;17&lt;/span&gt;
&lt;span class='line'&gt;18&lt;/span&gt;
&lt;span class='line'&gt;19&lt;/span&gt;
&lt;span class='line'&gt;20&lt;/span&gt;
&lt;span class='line'&gt;21&lt;/span&gt;
&lt;span class='line'&gt;22&lt;/span&gt;
&lt;span class='line'&gt;23&lt;/span&gt;
&lt;span class='line'&gt;24&lt;/span&gt;
&lt;span class='line'&gt;25&lt;/span&gt;
&lt;span class='line'&gt;26&lt;/span&gt;
&lt;span class='line'&gt;27&lt;/span&gt;
&lt;span class='line'&gt;28&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;&amp;lt;?php
&lt;/div&gt;&lt;div class='line'&gt;require_once dirname(__FILE__).'/../lib/Competition.php';
&lt;/div&gt;&lt;div class='line'&gt;require_once dirname(__FILE__).'/../lib/Entry.php';
&lt;/div&gt;&lt;div class='line'&gt;require_once dirname(__FILE__).'/support/Timecop.php';
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;class CompetitionTest extends PHPUnit_Framework_TestCase
&lt;/div&gt;&lt;div class='line'&gt;{
&lt;/div&gt;&lt;div class='line'&gt;    protected $competition;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    public function setUp() {
&lt;/div&gt;&lt;div class='line'&gt;        // Opens a day from now, closes a day after that.
&lt;/div&gt;&lt;div class='line'&gt;        $this-&gt;competition = new Competition($opens = strtotime('+1 day'), $closes = strtotime('+2 day'));
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    public function testEarlyEntry() {
&lt;/div&gt;&lt;div class='line'&gt;        $entry = $this-&gt;competition-&gt;enter(array('name' =&gt; 'Bert'));
&lt;/div&gt;&lt;div class='line'&gt;        $this-&gt;assertFalse($entry-&gt;isValid());
&lt;/div&gt;&lt;div class='line'&gt;        $this-&gt;assertContains(&quot;Too early!&quot;, $entry-&gt;errors);
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    public function testTimelyEntry() {
&lt;/div&gt;&lt;div class='line'&gt;        // TODO
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    public function testLateEntry() {
&lt;/div&gt;&lt;div class='line'&gt;        // TODO
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;}&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;(If you wish, you can set this up to autoload later by putting Timecop.php into &lt;code&gt;/usr/share/php&lt;/code&gt;, or wherever else your PEAR directory is.)&lt;/p&gt;

&lt;p&gt;Timecop-PHP provides a similar way to hop around to it's Ruby progenitor. Before jumping through time, though, you need to tell Timecop to prepare first with &lt;code&gt;Timecop::warpTime()&lt;/code&gt;.
After that, you can use &lt;code&gt;Timecop::travel()&lt;/code&gt; to move forward and back through time. &lt;code&gt;Timecop::freeze()&lt;/code&gt; is also supported, but you must first call &lt;code&gt;travel()&lt;/code&gt; to set the destination time.&lt;/p&gt;

&lt;p&gt;Here are the rest of the entry test cases, using Timecop to leap forward through the three competition states:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;lang=php &lt;/span&gt;&lt;/figcaption&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;span class='line'&gt;14&lt;/span&gt;
&lt;span class='line'&gt;15&lt;/span&gt;
&lt;span class='line'&gt;16&lt;/span&gt;
&lt;span class='line'&gt;17&lt;/span&gt;
&lt;span class='line'&gt;18&lt;/span&gt;
&lt;span class='line'&gt;19&lt;/span&gt;
&lt;span class='line'&gt;20&lt;/span&gt;
&lt;span class='line'&gt;21&lt;/span&gt;
&lt;span class='line'&gt;22&lt;/span&gt;
&lt;span class='line'&gt;23&lt;/span&gt;
&lt;span class='line'&gt;24&lt;/span&gt;
&lt;span class='line'&gt;25&lt;/span&gt;
&lt;span class='line'&gt;26&lt;/span&gt;
&lt;span class='line'&gt;27&lt;/span&gt;
&lt;span class='line'&gt;28&lt;/span&gt;
&lt;span class='line'&gt;29&lt;/span&gt;
&lt;span class='line'&gt;30&lt;/span&gt;
&lt;span class='line'&gt;31&lt;/span&gt;
&lt;span class='line'&gt;32&lt;/span&gt;
&lt;span class='line'&gt;33&lt;/span&gt;
&lt;span class='line'&gt;34&lt;/span&gt;
&lt;span class='line'&gt;35&lt;/span&gt;
&lt;span class='line'&gt;36&lt;/span&gt;
&lt;span class='line'&gt;37&lt;/span&gt;
&lt;span class='line'&gt;38&lt;/span&gt;
&lt;span class='line'&gt;39&lt;/span&gt;
&lt;span class='line'&gt;40&lt;/span&gt;
&lt;span class='line'&gt;41&lt;/span&gt;
&lt;span class='line'&gt;42&lt;/span&gt;
&lt;span class='line'&gt;43&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class=''&gt;&lt;div class='line'&gt;&amp;lt;?php
&lt;/div&gt;&lt;div class='line'&gt;require_once dirname(__FILE__).'/support/Timecop/lib/Timecop.php';
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;class CompetitionTest extends PHPUnit_Framework_TestCase
&lt;/div&gt;&lt;div class='line'&gt;{
&lt;/div&gt;&lt;div class='line'&gt;    const DAY_IN_SECONDS = 86400;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    protected $competition;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    // Runs before each test
&lt;/div&gt;&lt;div class='line'&gt;    public function setUp() {
&lt;/div&gt;&lt;div class='line'&gt;        // Opens a day from now, closes a day after that.
&lt;/div&gt;&lt;div class='line'&gt;        $this-&gt;competition = new Competition($opens = strtotime('+1 day'), $closes = strtotime('+2 day'));
&lt;/div&gt;&lt;div class='line'&gt;        Timecop::warpTime(); // Setup
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    public function testEarlyEntry() {
&lt;/div&gt;&lt;div class='line'&gt;        $entry = $this-&gt;competition-&gt;enter(array('name' =&gt; 'Bert'));
&lt;/div&gt;&lt;div class='line'&gt;        $this-&gt;assertFalse($entry-&gt;isValid());
&lt;/div&gt;&lt;div class='line'&gt;        $this-&gt;assertContains(&quot;Too early!&quot;, $entry-&gt;errors);
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    public function testTimelyEntry() {
&lt;/div&gt;&lt;div class='line'&gt;        // Jump a day and a half from now.
&lt;/div&gt;&lt;div class='line'&gt;        Timecop::travel(time() + self::DAY_IN_SECONDS * 1.5);
&lt;/div&gt;&lt;div class='line'&gt;        $entry = $this-&gt;competition-&gt;enter(array('name' =&gt; 'Sam'));
&lt;/div&gt;&lt;div class='line'&gt;        $this-&gt;assertTrue($entry-&gt;isValid());
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    public function testLateEntry() {
&lt;/div&gt;&lt;div class='line'&gt;        // Jump three days from now.
&lt;/div&gt;&lt;div class='line'&gt;        Timecop::travel(time() + self::DAY_IN_SECONDS * 3);
&lt;/div&gt;&lt;div class='line'&gt;        $entry = $this-&gt;competition-&gt;enter(array('name' =&gt; 'Frank'));
&lt;/div&gt;&lt;div class='line'&gt;        $this-&gt;assertFalse($entry-&gt;isValid());
&lt;/div&gt;&lt;div class='line'&gt;        $this-&gt;assertContains(&quot;Too late!&quot;, $entry-&gt;errors);
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    // Runs after each test
&lt;/div&gt;&lt;div class='line'&gt;    public function tearDown() {
&lt;/div&gt;&lt;div class='line'&gt;        // Always make sure we're back in the present.
&lt;/div&gt;&lt;div class='line'&gt;        Timecop::unwarpTime();
&lt;/div&gt;&lt;div class='line'&gt;    }
&lt;/div&gt;&lt;div class='line'&gt;}&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;You can get the sample classes, full test suite and running instructions from &lt;a href=&quot;https://github.com/damncabbage/pilfering-gems-examples/blob/master/timecop/php&quot;&gt;the php directory in this GitHub project&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Flags vs Constants, and Short-Long Days of the Week</title>
    <link href="http://robhoward.id.au/blog/2011/12/flags-vs-constants-short-long-days-of-the-week/"/>
    <updated>2011-12-12T22:52:00+11:00</updated>
    <id>http://robhoward.id.au/blog/2011/12/flags-vs-constants-short-long-days-of-the-week</id>
    <content type="html">&lt;p&gt;Here's an example: say we have a number (1) stored in a database table row, and we want to turn it into a human-readable day name, such as &quot;Tuesday&quot;.&lt;/p&gt;

&lt;p&gt;Here was my attempt at getting it done in PHP, after checking through the arse end of the manual for the obscure date functions:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;// Method Signature (from http://www.php.net/manual/en/function.jddayofweek.php )&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;// mixed jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] )&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;// In use:&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;echo jddayofweek(1, CAL_DOW_LONG);  // Produces &amp;quot;Tue&amp;quot;&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;echo jddayofweek(1, CAL_DOW_SHORT); // Produces &amp;quot;Tuesday&amp;quot;&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;Ow. So what's going on?&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;We have a &quot;set&quot; of calendar constants that would seem to apply:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CAL_DOW_DAYNO&lt;/code&gt; (evaluates to &lt;code&gt;0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CAL_DOW_SHORT&lt;/code&gt; (evaluates to &lt;code&gt;1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CAL_DOW_LONG&lt;/code&gt; (evaluates to &lt;code&gt;2&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Looking at the method signature, &lt;code&gt;jddayofweek&lt;/code&gt; clearly uses &lt;code&gt;CAL_DOW_DAYNO&lt;/code&gt;, which would imply that &lt;code&gt;CAL_DOW_LONG&lt;/code&gt; and &lt;code&gt;CAL_DOW_SHORT&lt;/code&gt; are also usable. Right? Nope.&lt;/p&gt;

&lt;p&gt;It turns out &lt;code&gt;jddayofweek&lt;/code&gt; doesn't use anything other than &lt;code&gt;CAL_DOW_DAYNO&lt;/code&gt;. &lt;code&gt;1&lt;/code&gt; returns the full day, and &lt;code&gt;2&lt;/code&gt; returns an abbreviated day. &lt;code&gt;jddayofweek&lt;/code&gt; doesn't use the rest of the &lt;code&gt;CAL_DOW_...&lt;/code&gt; constants at all, just the plain numbers instead.&lt;/p&gt;

&lt;h2&gt;Learnings&lt;/h2&gt;

&lt;p&gt;This is a good argument for symbols a la Ruby (or atoms as per Erlang, or similar concepts across a host of other languages).&lt;/p&gt;

&lt;h3&gt;Constants&lt;/h3&gt;

&lt;p&gt;With PHP (and C, Ruby, Perl and a bunch of other languages), constants are thin veils draped over values like integers and strings; you can see right through them if you get close enough. Several PHP constants could evaluate to the same value. Here's a sampler of constants that evaluate to &lt;code&gt;2&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CAL_DOW_LONG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CAL_EASTER_ALWAYS_GREGORIAN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IMG_JPG&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MYSQLI_NUM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X509_PURPOSE_SSL_SERVER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXTR_PREFIX_SAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Say we have this function:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;const(&amp;quot;STATUS_PEACE&amp;quot;, 1);&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;const(&amp;quot;STATUS_WAR&amp;quot;, 2);&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;function should_launch_nukes($status) {&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;  return ($status == STATUS_WAR);&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;These are functionally equivalent:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;// All indicate we should launch the nukes.&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;echo should_launch_nukes(STATUS_WAR);&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;echo should_launch_nukes(CAL_DOW_LONG);&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;echo should_launch_nukes(MYSQLI_NUM);&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;x&quot;&gt;echo should_launch_nukes(2);&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;h3&gt;Ruby Symbols&lt;/h3&gt;

&lt;p&gt;With Ruby, a symbol is like a block of granite; it's the same thing all the way through. A function that accepts &lt;code&gt;:jpg&lt;/code&gt; is never going to accidentally accept a symbol like &lt;code&gt;:dow_long&lt;/code&gt;. As far as the guy typing in the code cares, &lt;code&gt;:jpg&lt;/code&gt; means neither &lt;code&gt;2&lt;/code&gt; nor &lt;code&gt;&quot;jpg&quot;&lt;/code&gt;; it just means &lt;code&gt;:jpg&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;div class='line'&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;launch_nukes?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:war&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;n&quot;&gt;launch_nukes?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:peace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Nope.&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;n&quot;&gt;launch_nukes?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:dow_long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Nope.&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;n&quot;&gt;launch_nukes?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Nope.&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;n&quot;&gt;launch_nukes?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:war&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Fire ze missiles.&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;h3&gt;Strings vs Symbols&lt;/h3&gt;

&lt;p&gt;So why not strings instead? &lt;code&gt;launch_nukes?(&quot;peace&quot;)&lt;/code&gt; would be just as good, right?&lt;/p&gt;

&lt;p&gt;With the bonus semantic benefits aside, symbols are just plain efficient. &lt;code&gt;:jpg&lt;/code&gt; is &lt;code&gt;:jpg&lt;/code&gt; is &lt;code&gt;:jpg&lt;/code&gt;. Inspect a bunch of &lt;code&gt;:jpg&lt;/code&gt; symbols, and you'll find they'll all be references to the one object. Try this out:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;div class='line'&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jpg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 454088&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jpg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 454088&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jpg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 454088&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;(This is, though, arguably a problem with Ruby. Python treats strings as immutable, and are thus the same as symbols in this regard. Ruby strings are mutable (eg. &lt;code&gt;str = &quot;foo&quot;; str &amp;lt;&amp;lt; &quot;bar&quot;; puts str&lt;/code&gt; outputs &quot;foobar&quot;), so we need a separate classification for the immutable variant. Consider, though, that PHP strings are mutable, &lt;em&gt;and&lt;/em&gt; there is no separate symbol-alike type.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.robertsosinski.com/2009/01/11/the-difference-between-ruby-symbols-and-strings/&quot;&gt;This article by Robert Sosinski&lt;/a&gt; goes into greater depth about the inner workings of symbols and how they differ from strings. (Cheers to Mr Sosinski for the idea for the Nukes example.)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Less wood behind more arrows: nested_form</title>
    <link href="http://robhoward.id.au/blog/2011/09/less-wood-behind-more-arrows-nested-form/"/>
    <updated>2011-09-20T20:15:00+10:00</updated>
    <id>http://robhoward.id.au/blog/2011/09/less-wood-behind-more-arrows-nested-form</id>
    <content type="html">&lt;p&gt;&lt;em&gt;(Or, &quot;Crazy forks everywhere&quot;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All the way back in &lt;a href=&quot;http://railscasts.com/episodes/197-nested-model-form-part-2&quot;&gt;RailsCast 197&lt;/a&gt; Ryan Bates introduced us to his javascript-powered dynamic nested form gem, &lt;a href=&quot;http://github.com/ryanb/nested_form&quot;&gt;nested_form&lt;/a&gt;. It's pretty useful, and in concert with Rails' existing &lt;code&gt;accepts_nested_attributes_for :relation&lt;/code&gt;, got pretty close to solving a problem I haven't ever seen cleanly solved without unwieldy controller code and custom javascript.&lt;/p&gt;

&lt;p&gt;Ryan has previously kept it up to date (bless his socks), but now after a three months and a gradual accumulation of about twenty outstanding pull requests (some that fix niggles like hardcoded markup, the undocumented testing environment, and weird jumbled-attribute record creation bugs), I need to move on so I can &lt;a href=&quot;https://github.com/smashcon/lincoln&quot;&gt;get back to work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;a href=&quot;https://github.com/elmatou&quot;&gt;elmatou&lt;/a&gt; forked &lt;code&gt;nested_form&lt;/code&gt;, merged a bunch of changes and made plenty of his own, and put it all in &lt;a href=&quot;https://github.com/elmatou/nested_form/tree/defacto&quot;&gt;a branch called 'defacto'&lt;/a&gt;. These changes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configurable wrapper markup,&lt;/li&gt;
&lt;li&gt;Actual removal of 'removed' forms,&lt;/li&gt;
&lt;li&gt;Positionable insertion of newly-added nested forms,&lt;/li&gt;
&lt;li&gt;Storage of the field template in a javascript variable, not inside a hidden &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; (meaning your markup doesn't break when using Formtastic).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Also fortunately, &lt;a href=&quot;https://github.com/fxposter&quot;&gt;fxposter&lt;/a&gt; (a long-time &lt;code&gt;nested_form&lt;/code&gt; committer) has &lt;a href=&quot;https://github.com/fxposter/nested_form&quot;&gt;also forked&lt;/a&gt;, and improved the testing situation by swapping out Appraisal with an integrated dummy app.&lt;/p&gt;

&lt;p&gt;As is tradition for any moderately popular project, there are a ton more forks and the situation is as messy as hell, but if you need one of the above fixes sooner than later, then pull in one of these versions of &lt;code&gt;nested_form&lt;/code&gt; by putting the following in your Gemfile:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;div class='line'&gt;&lt;span class=&quot;c1&quot;&gt;# The Ryan Bates original:&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;c1&quot;&gt;#gem &amp;#39;nested_form&amp;#39; # The Ryan Bates original&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;c1&quot;&gt;# Fxposter&amp;#39;s fork:&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nested_form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;git://github.com/fxposter/nested_form.git&amp;#39;&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;c1&quot;&gt;# Elmatou&amp;#39;s fork:&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nested_form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;git://github.com/elmatou/nested_form.git&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;defacto&amp;#39;&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;I've elected to go with Elmatou's fork (for the moment) for the configurable markup. Formtastic's ordered &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; field setup is not friendly at all with Ryan's hardcoded &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;(tl;dr &lt;a href=&quot;https://github.com/ryanb/nested_form&quot;&gt;nested_form&lt;/a&gt; has some odd bugs, &lt;a href=&quot;https://github.com/elmatou/nested_form/tree/defacto&quot;&gt;elmatou's fork&lt;/a&gt; has less, but &lt;a href=&quot;https://github.com/fxposter/nested_form&quot;&gt;fxposter's fork&lt;/a&gt; has a better testing setup. I'm using elmatou's to &lt;a href=&quot;https://github.com/smashcon/lincoln&quot;&gt;get on with building stuff&lt;/a&gt;. It's all kind of sad right now.)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Stop GNOME "Hijacking" SSH Key Entry</title>
    <link href="http://robhoward.id.au/blog/2011/03/stop-gnome-hijacking-ssh-key-entry/"/>
    <updated>2011-03-26T19:17:00+11:00</updated>
    <id>http://robhoward.id.au/blog/2011/03/stop-gnome-hijacking-ssh-key-entry</id>
    <content type="html">&lt;p&gt;Here’s the scenario:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You’re sitting at your desktop, and you start a Screen session.&lt;/li&gt;
&lt;li&gt;You do a bunch of work (say, lots of vim and a &lt;code&gt;git commit&lt;/code&gt;); and then rush off.&lt;/li&gt;
&lt;li&gt;You log in remotely, reconnect your Screen session with &lt;code&gt;screen -dR&lt;/code&gt;, and try to do something that uses an SSH key (say, you &lt;code&gt;git push&lt;/code&gt; to github).&lt;/li&gt;
&lt;li&gt;Your SSH session mysteriously hangs.&lt;/li&gt;
&lt;li&gt;A Ctrl-C later and a head-scratch later, you run &lt;code&gt;ssh -v git@github.com&lt;/code&gt;, and you get as far as &lt;code&gt;debug1: Server accepts key: pkalg ssh-rsa ...&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Meanwhile, back on your desktop at home, GNOME has popped up this dialog:&lt;/p&gt;

&lt;p&gt;&lt;img class='' src='http://robhoward.id.au/images/posts/gnome-password-lock.png' width='' height='' alt='GNOME says, &quot;Enter password to unlock private key&quot;' title='GNOME says, &quot;Enter password to unlock private key&quot;'&gt;&lt;/p&gt;

&lt;p&gt;Bollocks.&lt;/p&gt;

&lt;h3&gt;The Fix&lt;/h3&gt;

&lt;p&gt;To stop this happening again, run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gconftool-2 --set -t bool /apps/gnome-keyring/daemon-components/ssh false
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
</feed>
